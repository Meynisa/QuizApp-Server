{
  "questions": [
    {
      "question": "Which keyword is used to declare a variable in Kotlin that can be reassigned?",
      "correctAnswer": "var",
      "incorrectAnswers": ["val", "let", "const"],
      "explanation": "In Kotlin, 'var' is used to declare a mutable variable that can be reassigned, while 'val' declares an immutable variable.",
      "topicCode": 1
    },
    {
      "question": "In Swift, which of the following is used to handle optional values safely?",
      "correctAnswer": "if let",
      "incorrectAnswers": ["guard var", "force unwrap", "optional chaining only"],
      "explanation": "'if let' is used in Swift for optional binding, which safely unwraps optional values if they contain a value.",
      "topicCode": 2
    },
    {
      "question": "What is the primary benefit of using Kotlin Multiplatform for mobile development?",
      "correctAnswer": "Code sharing between platforms",
      "incorrectAnswers": ["Better performance than native", "Larger community than Flutter", "No need to learn platform-specific APIs"],
      "explanation": "Kotlin Multiplatform allows sharing business logic code between different platforms while still using native UI components.",
      "topicCode": 3
    },
    {
      "question": "Which widget in Flutter is used to create a scrollable list of widgets?",
      "correctAnswer": "ListView",
      "incorrectAnswers": ["Column", "GridView", "Stack"],
      "explanation": "ListView in Flutter is a scrollable list of widgets arranged linearly, either vertically or horizontally.",
      "topicCode": 4
    },
    {
      "question": "In Kotlin, what is the correct way to define a function that returns nothing?",
      "correctAnswer": "fun doSomething(): Unit",
      "incorrectAnswers": ["fun doSomething(): void", "fun doSomething(): None", "fun doSomething(): Null"],
      "explanation": "In Kotlin, Unit is used to indicate that a function returns nothing, similar to void in other languages.",
      "topicCode": 1
    },
    {
      "question": "Which Swift feature allows for adding functionality to existing types?",
      "correctAnswer": "Extensions",
      "incorrectAnswers": ["Protocols", "Generics", "Subclassing"],
      "explanation": "Extensions in Swift allow you to add new functionality to existing classes, structures, enumerations, or protocols.",
      "topicCode": 2
    },
    {
      "question": "In Kotlin Multiplatform, what is the purpose of the 'expect/actual' mechanism?",
      "correctAnswer": "To define platform-specific implementations",
      "incorrectAnswers": ["To handle exceptions", "To declare interfaces", "To optimize performance"],
      "explanation": "The 'expect/actual' mechanism allows you to declare expected declarations in common code and provide platform-specific actual implementations.",
      "topicCode": 3
    },
    {
      "question": "What is the root widget in a Flutter application?",
      "correctAnswer": "MaterialApp or CupertinoApp",
      "incorrectAnswers": ["Scaffold", "Container", "AppBar"],
      "explanation": "MaterialApp (for Material Design) or CupertinoApp (for iOS-style) are typically the root widgets that wrap the entire Flutter application.",
      "topicCode": 4
    },
    {
      "question": "Which Kotlin feature helps prevent null pointer exceptions?",
      "correctAnswer": "Nullable types",
      "incorrectAnswers": ["Extension functions", "Data classes", "Coroutines"],
      "explanation": "Kotlin's nullable types (marked with ?) force developers to explicitly handle null cases, helping prevent null pointer exceptions.",
      "topicCode": 1
    },
    {
      "question": "In Swift, what is the primary purpose of the 'defer' statement?",
      "correctAnswer": "To execute code when leaving the current scope",
      "incorrectAnswers": ["To delay execution of code", "To handle errors", "To declare asynchronous code"],
      "explanation": "The 'defer' statement in Swift is used to execute a set of statements just before code execution leaves the current block of code.",
      "topicCode": 2
    },

    {
      "question": "Which Flutter widget is used to create a material design button?",
      "correctAnswer": "ElevatedButton",
      "incorrectAnswers": ["FlatButton", "RaisedButton", "MaterialButton"],
      "explanation": "ElevatedButton is the modern Flutter widget for material design buttons that appear elevated with a shadow.",
      "topicCode": 4
    },
    {
      "question": "In Kotlin, what is the primary purpose of data classes?",
      "correctAnswer": "To hold data/state",
      "incorrectAnswers": ["To implement business logic", "To handle UI components", "To manage database connections"],
      "explanation": "Data classes in Kotlin are primarily used to hold data and automatically generate useful methods like toString(), equals(), and hashCode().",
      "topicCode": 1
    },
    {
      "question": "Which Swift keyword is used to define a constant that can't be changed?",
      "correctAnswer": "let",
      "incorrectAnswers": ["var", "const", "static"],
      "explanation": "In Swift, 'let' declares a constant that cannot be changed after initialization, similar to 'val' in Kotlin.",
      "topicCode": 2
    },
    {
      "question": "What is the main advantage of using Kotlin Multiplatform over Flutter?",
      "correctAnswer": "Native UI performance",
      "incorrectAnswers": ["Faster development cycle", "Larger plugin ecosystem", "Easier to learn"],
      "explanation": "Kotlin Multiplatform allows using native UI components on each platform, resulting in better performance and platform consistency compared to Flutter's widget-based approach.",
      "topicCode": 3
    },
    {
      "question": "Which Flutter command is used to add a package dependency?",
      "correctAnswer": "flutter pub add",
      "incorrectAnswers": ["flutter install package", "flutter dependency add", "flutter get package"],
      "explanation": "The 'flutter pub add' command is used to add a package dependency to your Flutter project's pubspec.yaml file.",
      "topicCode": 4
    },
    {
      "question": "What Kotlin feature allows suspending and resuming execution without blocking threads?",
      "correctAnswer": "Coroutines",
      "incorrectAnswers": ["Extensions", "Delegates", "Sealed classes"],
      "explanation": "Kotlin coroutines enable asynchronous programming by allowing suspension and resumption of execution without blocking threads.",
      "topicCode": 1
    },
    {
      "question": "In Swift, what is the purpose of the 'guard' statement?",
      "correctAnswer": "Early exit if conditions aren't met",
      "incorrectAnswers": ["Loop control", "Error throwing", "Memory management"],
      "explanation": "The 'guard' statement provides early exit from a scope if certain conditions aren't met, helping to avoid nested if statements.",
      "topicCode": 2
    },
    {
      "question": "Which Kotlin Multiplatform feature allows sharing code between JVM and JavaScript?",
      "correctAnswer": "Multiplatform projects",
      "incorrectAnswers": ["Java interop", "Kotlin/JS", "Common module"],
      "explanation": "Kotlin Multiplatform projects can target both JVM and JavaScript platforms from shared code in the common module.",
      "topicCode": 3
    },
    {
      "question": "What is the purpose of the 'BuildContext' in Flutter?",
      "correctAnswer": "Handle widget location in the tree",
      "incorrectAnswers": ["Manage state", "Handle animations", "Connect to native platform"],
      "explanation": "BuildContext represents a widget's location in the widget tree and is used to access theme data, navigate, and find ancestor widgets.",
      "topicCode": 4
    },
    {
      "question": "Which Kotlin feature allows adding functions to existing classes without inheritance?",
      "correctAnswer": "Extension functions",
      "incorrectAnswers": ["Inline functions", "Higher-order functions", "Infix functions"],
      "explanation": "Extension functions in Kotlin allow adding new functionality to existing classes without modifying their source code or using inheritance.",
      "topicCode": 1
    },
    {
      "question": "Which concept exists in both Kotlin and Swift to safely handle operations that might return null?",
      "correctAnswer": "Optional types",
      "incorrectAnswers": ["Extension functions", "Coroutines", "Widget trees"],
      "explanation": "Both Kotlin (nullable types with ?) and Swift (Optionals) have optional types to safely handle potentially null values, though their implementations differ.",
      "topicCode": 5
    },
    {
      "question": "When comparing Flutter's hot reload with Kotlin Multiplatform's development experience, what is a key difference?",
      "correctAnswer": "Flutter's hot reload works with UI changes while KMP requires native rebuilds",
      "incorrectAnswers": [
        "KMP has faster hot reload than Flutter",
        "Both technologies have identical hot reload capabilities",
        "Only KMP supports state preservation during reload"
      ],
      "explanation": "Flutter's hot reload preserves app state and works for UI changes, while Kotlin Multiplatform's shared code changes require rebuilding the native UI components.",
      "topicCode": 5
    },
    {
      "question": "Which architecture pattern is commonly used across all four technologies (Kotlin, Swift, KMP, Flutter)?",
      "correctAnswer": "MVVM (Model-View-ViewModel)",
      "incorrectAnswers": [
        "VIPER (View-Interactor-Presenter-Entity-Router)",
        "RIBs (Router-Interactor-Builder)",
        "Clean Architecture"
      ],
      "explanation": "MVVM is widely implemented across all platforms - with ViewModels in Android/KMP, ObservableObject in SwiftUI, and various state management solutions in Flutter.",
      "topicCode": 5
    },
    {
      "question": "What do Kotlin's 'expect/actual' and Flutter's 'Platform Channels' have in common?",
      "correctAnswer": "Both are mechanisms to handle platform-specific code",
      "incorrectAnswers": [
        "Both are used for state management",
        "Both are deprecated features",
        "Both are exclusive to iOS development"
      ],
      "explanation": "Kotlin's expect/actual declares platform-specific implementations in shared code, while Flutter's Platform Channels allow communication with native code - both bridge platform differences.",
      "topicCode": 5
    },
    {
      "question": "Which concurrency model is shared between Kotlin (Coroutines), Swift (Async/Await), and Dart (Flutter)?",
      "correctAnswer": "Structured concurrency",
      "incorrectAnswers": [
        "Actor model",
        "Reactive streams",
        "Thread pools"
      ],
      "explanation": "All three languages implement structured concurrency principles - Kotlin with coroutine scopes, Swift with task hierarchies, and Dart with async/await and Futures.",
      "topicCode": 5
    }
  ]
}